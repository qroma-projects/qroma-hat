// @generated by protobuf-ts 2.9.3 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "my-project-messages.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message HelloQromaRequest
 */
export interface HelloQromaRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message HelloQromaResponse
 */
export interface HelloQromaResponse {
    /**
     * @generated from protobuf field: string response = 1;
     */
    response: string;
    /**
     * @generated from protobuf field: uint32 callCount = 2;
     */
    callCount: number;
    /**
     * @generated from protobuf field: uint32 nameLength = 3;
     */
    nameLength: number;
}
/**
 * @generated from protobuf message MathRequest
 */
export interface MathRequest {
    /**
     * @generated from protobuf field: uint32 a = 1;
     */
    a: number;
    /**
     * @generated from protobuf field: uint32 b = 2;
     */
    b: number;
    /**
     * @generated from protobuf field: MathOperation op = 3;
     */
    op: MathOperation;
}
/**
 * @generated from protobuf message MathResult_Add
 */
export interface MathResult_Add {
    /**
     * @generated from protobuf field: uint32 result = 1;
     */
    result: number;
}
/**
 * @generated from protobuf message MathResult_Subtract
 */
export interface MathResult_Subtract {
    /**
     * @generated from protobuf field: uint32 result = 1;
     */
    result: number;
}
/**
 * @generated from protobuf message MathResult_AddAndSubtract
 */
export interface MathResult_AddAndSubtract {
    /**
     * @generated from protobuf field: uint32 addResult = 1;
     */
    addResult: number;
    /**
     * @generated from protobuf field: uint32 subtractResult = 2;
     */
    subtractResult: number;
}
/**
 * @generated from protobuf message MathResponse
 */
export interface MathResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "addResult";
        /**
         * @generated from protobuf field: MathResult_Add addResult = 1;
         */
        addResult: MathResult_Add;
    } | {
        oneofKind: "subtractResult";
        /**
         * @generated from protobuf field: MathResult_Subtract subtractResult = 2;
         */
        subtractResult: MathResult_Subtract;
    } | {
        oneofKind: "addAndSubtractResult";
        /**
         * @generated from protobuf field: MathResult_AddAndSubtract addAndSubtractResult = 3;
         */
        addAndSubtractResult: MathResult_AddAndSubtract;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message BoardDetails
 */
export interface BoardDetails {
    /**
     * @generated from protobuf field: string boardName = 1;
     */
    boardName: string;
    /**
     * @generated from protobuf field: bool hasRgb = 2;
     */
    hasRgb: boolean;
}
/**
 * @generated from protobuf message MyProjectDetails
 */
export interface MyProjectDetails {
    /**
     * @generated from protobuf field: string projectName = 1;
     */
    projectName: string;
}
/**
 * @generated from protobuf message MyProjectConfiguration
 */
export interface MyProjectConfiguration {
    /**
     * @generated from protobuf field: string userName = 1;
     */
    userName: string;
    /**
     * @generated from protobuf field: uint32 startupRed = 2;
     */
    startupRed: number;
    /**
     * @generated from protobuf field: uint32 startupGreen = 3;
     */
    startupGreen: number;
    /**
     * @generated from protobuf field: uint32 startupBlue = 4;
     */
    startupBlue: number;
}
/**
 * @generated from protobuf message GetProjectDetailsResponse
 */
export interface GetProjectDetailsResponse {
    /**
     * @generated from protobuf field: MyProjectDetails projectDetails = 1;
     */
    projectDetails?: MyProjectDetails;
    /**
     * @generated from protobuf field: MyProjectConfiguration currentConfiguration = 2;
     */
    currentConfiguration?: MyProjectConfiguration;
}
/**
 * @generated from protobuf message SetBoardLightColorRequest
 */
export interface SetBoardLightColorRequest {
    /**
     * @generated from protobuf field: uint32 red = 1;
     */
    red: number;
    /**
     * @generated from protobuf field: uint32 green = 2;
     */
    green: number;
    /**
     * @generated from protobuf field: uint32 blue = 3;
     */
    blue: number;
}
/**
 * @generated from protobuf message SetBoardLightColorResponse
 */
export interface SetBoardLightColorResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message InvalidCommandResponse
 */
export interface InvalidCommandResponse {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message MyProjectCommand
 */
export interface MyProjectCommand {
    /**
     * @generated from protobuf oneof: command
     */
    command: {
        oneofKind: "noArgCommand";
        /**
         * @generated from protobuf field: NoArgCommands noArgCommand = 1;
         */
        noArgCommand: NoArgCommands;
    } | {
        oneofKind: "helloQromaRequest";
        /**
         * @generated from protobuf field: HelloQromaRequest helloQromaRequest = 2;
         */
        helloQromaRequest: HelloQromaRequest;
    } | {
        oneofKind: "mathRequest";
        /**
         * @generated from protobuf field: MathRequest mathRequest = 3;
         */
        mathRequest: MathRequest;
    } | {
        oneofKind: "setBoardLightColorRequest";
        /**
         * @generated from protobuf field: SetBoardLightColorRequest setBoardLightColorRequest = 4;
         */
        setBoardLightColorRequest: SetBoardLightColorRequest;
    } | {
        oneofKind: "setMyProjectConfigurationRequest";
        /**
         * @generated from protobuf field: MyProjectConfiguration setMyProjectConfigurationRequest = 5;
         */
        setMyProjectConfigurationRequest: MyProjectConfiguration;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message MyProjectResponse
 */
export interface MyProjectResponse {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "invalidCommandResponse";
        /**
         * @generated from protobuf field: InvalidCommandResponse invalidCommandResponse = 1;
         */
        invalidCommandResponse: InvalidCommandResponse;
    } | {
        oneofKind: "helloQromaResponse";
        /**
         * @generated from protobuf field: HelloQromaResponse helloQromaResponse = 2;
         */
        helloQromaResponse: HelloQromaResponse;
    } | {
        oneofKind: "mathResponse";
        /**
         * @generated from protobuf field: MathResponse mathResponse = 3;
         */
        mathResponse: MathResponse;
    } | {
        oneofKind: "getBoardDetailsResponse";
        /**
         * @generated from protobuf field: BoardDetails getBoardDetailsResponse = 4;
         */
        getBoardDetailsResponse: BoardDetails;
    } | {
        oneofKind: "setBoardLightColorResponse";
        /**
         * @generated from protobuf field: SetBoardLightColorResponse setBoardLightColorResponse = 5;
         */
        setBoardLightColorResponse: SetBoardLightColorResponse;
    } | {
        oneofKind: "getProjectDetailsResponse";
        /**
         * @generated from protobuf field: GetProjectDetailsResponse getProjectDetailsResponse = 6;
         */
        getProjectDetailsResponse: GetProjectDetailsResponse;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum MathOperation
 */
export enum MathOperation {
    /**
     * @generated from protobuf enum value: MathOp_NotSet = 0;
     */
    MathOp_NotSet = 0,
    /**
     * @generated from protobuf enum value: MathOp_Add = 1;
     */
    MathOp_Add = 1,
    /**
     * @generated from protobuf enum value: MathOp_Subtract = 2;
     */
    MathOp_Subtract = 2,
    /**
     * @generated from protobuf enum value: MathOp_Add_And_Subtract = 3;
     */
    MathOp_Add_And_Subtract = 3
}
/**
 * @generated from protobuf enum NoArgCommands
 */
export enum NoArgCommands {
    /**
     * @generated from protobuf enum value: Nac_NotSet = 0;
     */
    Nac_NotSet = 0,
    /**
     * @generated from protobuf enum value: Nac_GetProjectDetailsRequest = 1;
     */
    Nac_GetProjectDetailsRequest = 1,
    /**
     * @generated from protobuf enum value: Nac_GetBoardDetailsRequest = 2;
     */
    Nac_GetBoardDetailsRequest = 2,
    /**
     * @generated from protobuf enum value: Nac_SaveCurrentConfiguration = 3;
     */
    Nac_SaveCurrentConfiguration = 3,
    /**
     * @generated from protobuf enum value: Nac_LoadSavedConfiguration = 4;
     */
    Nac_LoadSavedConfiguration = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class HelloQromaRequest$Type extends MessageType<HelloQromaRequest> {
    constructor() {
        super("HelloQromaRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HelloQromaRequest>): HelloQromaRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<HelloQromaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HelloQromaRequest): HelloQromaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HelloQromaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message HelloQromaRequest
 */
export const HelloQromaRequest = new HelloQromaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HelloQromaResponse$Type extends MessageType<HelloQromaResponse> {
    constructor() {
        super("HelloQromaResponse", [
            { no: 1, name: "response", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "callCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "nameLength", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HelloQromaResponse>): HelloQromaResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = "";
        message.callCount = 0;
        message.nameLength = 0;
        if (value !== undefined)
            reflectionMergePartial<HelloQromaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HelloQromaResponse): HelloQromaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string response */ 1:
                    message.response = reader.string();
                    break;
                case /* uint32 callCount */ 2:
                    message.callCount = reader.uint32();
                    break;
                case /* uint32 nameLength */ 3:
                    message.nameLength = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HelloQromaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string response = 1; */
        if (message.response !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.response);
        /* uint32 callCount = 2; */
        if (message.callCount !== 0)
            writer.tag(2, WireType.Varint).uint32(message.callCount);
        /* uint32 nameLength = 3; */
        if (message.nameLength !== 0)
            writer.tag(3, WireType.Varint).uint32(message.nameLength);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message HelloQromaResponse
 */
export const HelloQromaResponse = new HelloQromaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MathRequest$Type extends MessageType<MathRequest> {
    constructor() {
        super("MathRequest", [
            { no: 1, name: "a", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "b", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "op", kind: "enum", T: () => ["MathOperation", MathOperation] }
        ]);
    }
    create(value?: PartialMessage<MathRequest>): MathRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.a = 0;
        message.b = 0;
        message.op = 0;
        if (value !== undefined)
            reflectionMergePartial<MathRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MathRequest): MathRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 a */ 1:
                    message.a = reader.uint32();
                    break;
                case /* uint32 b */ 2:
                    message.b = reader.uint32();
                    break;
                case /* MathOperation op */ 3:
                    message.op = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MathRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 a = 1; */
        if (message.a !== 0)
            writer.tag(1, WireType.Varint).uint32(message.a);
        /* uint32 b = 2; */
        if (message.b !== 0)
            writer.tag(2, WireType.Varint).uint32(message.b);
        /* MathOperation op = 3; */
        if (message.op !== 0)
            writer.tag(3, WireType.Varint).int32(message.op);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MathRequest
 */
export const MathRequest = new MathRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MathResult_Add$Type extends MessageType<MathResult_Add> {
    constructor() {
        super("MathResult_Add", [
            { no: 1, name: "result", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MathResult_Add>): MathResult_Add {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        if (value !== undefined)
            reflectionMergePartial<MathResult_Add>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MathResult_Add): MathResult_Add {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 result */ 1:
                    message.result = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MathResult_Add, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).uint32(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MathResult_Add
 */
export const MathResult_Add = new MathResult_Add$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MathResult_Subtract$Type extends MessageType<MathResult_Subtract> {
    constructor() {
        super("MathResult_Subtract", [
            { no: 1, name: "result", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MathResult_Subtract>): MathResult_Subtract {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.result = 0;
        if (value !== undefined)
            reflectionMergePartial<MathResult_Subtract>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MathResult_Subtract): MathResult_Subtract {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 result */ 1:
                    message.result = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MathResult_Subtract, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 result = 1; */
        if (message.result !== 0)
            writer.tag(1, WireType.Varint).uint32(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MathResult_Subtract
 */
export const MathResult_Subtract = new MathResult_Subtract$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MathResult_AddAndSubtract$Type extends MessageType<MathResult_AddAndSubtract> {
    constructor() {
        super("MathResult_AddAndSubtract", [
            { no: 1, name: "addResult", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "subtractResult", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MathResult_AddAndSubtract>): MathResult_AddAndSubtract {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.addResult = 0;
        message.subtractResult = 0;
        if (value !== undefined)
            reflectionMergePartial<MathResult_AddAndSubtract>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MathResult_AddAndSubtract): MathResult_AddAndSubtract {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 addResult */ 1:
                    message.addResult = reader.uint32();
                    break;
                case /* uint32 subtractResult */ 2:
                    message.subtractResult = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MathResult_AddAndSubtract, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 addResult = 1; */
        if (message.addResult !== 0)
            writer.tag(1, WireType.Varint).uint32(message.addResult);
        /* uint32 subtractResult = 2; */
        if (message.subtractResult !== 0)
            writer.tag(2, WireType.Varint).uint32(message.subtractResult);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MathResult_AddAndSubtract
 */
export const MathResult_AddAndSubtract = new MathResult_AddAndSubtract$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MathResponse$Type extends MessageType<MathResponse> {
    constructor() {
        super("MathResponse", [
            { no: 1, name: "addResult", kind: "message", oneof: "response", T: () => MathResult_Add },
            { no: 2, name: "subtractResult", kind: "message", oneof: "response", T: () => MathResult_Subtract },
            { no: 3, name: "addAndSubtractResult", kind: "message", oneof: "response", T: () => MathResult_AddAndSubtract }
        ]);
    }
    create(value?: PartialMessage<MathResponse>): MathResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MathResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MathResponse): MathResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MathResult_Add addResult */ 1:
                    message.response = {
                        oneofKind: "addResult",
                        addResult: MathResult_Add.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).addResult)
                    };
                    break;
                case /* MathResult_Subtract subtractResult */ 2:
                    message.response = {
                        oneofKind: "subtractResult",
                        subtractResult: MathResult_Subtract.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).subtractResult)
                    };
                    break;
                case /* MathResult_AddAndSubtract addAndSubtractResult */ 3:
                    message.response = {
                        oneofKind: "addAndSubtractResult",
                        addAndSubtractResult: MathResult_AddAndSubtract.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).addAndSubtractResult)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MathResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MathResult_Add addResult = 1; */
        if (message.response.oneofKind === "addResult")
            MathResult_Add.internalBinaryWrite(message.response.addResult, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* MathResult_Subtract subtractResult = 2; */
        if (message.response.oneofKind === "subtractResult")
            MathResult_Subtract.internalBinaryWrite(message.response.subtractResult, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* MathResult_AddAndSubtract addAndSubtractResult = 3; */
        if (message.response.oneofKind === "addAndSubtractResult")
            MathResult_AddAndSubtract.internalBinaryWrite(message.response.addAndSubtractResult, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MathResponse
 */
export const MathResponse = new MathResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BoardDetails$Type extends MessageType<BoardDetails> {
    constructor() {
        super("BoardDetails", [
            { no: 1, name: "boardName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hasRgb", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BoardDetails>): BoardDetails {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.boardName = "";
        message.hasRgb = false;
        if (value !== undefined)
            reflectionMergePartial<BoardDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BoardDetails): BoardDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string boardName */ 1:
                    message.boardName = reader.string();
                    break;
                case /* bool hasRgb */ 2:
                    message.hasRgb = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BoardDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string boardName = 1; */
        if (message.boardName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.boardName);
        /* bool hasRgb = 2; */
        if (message.hasRgb !== false)
            writer.tag(2, WireType.Varint).bool(message.hasRgb);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BoardDetails
 */
export const BoardDetails = new BoardDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MyProjectDetails$Type extends MessageType<MyProjectDetails> {
    constructor() {
        super("MyProjectDetails", [
            { no: 1, name: "projectName", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MyProjectDetails>): MyProjectDetails {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.projectName = "";
        if (value !== undefined)
            reflectionMergePartial<MyProjectDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MyProjectDetails): MyProjectDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string projectName */ 1:
                    message.projectName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MyProjectDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string projectName = 1; */
        if (message.projectName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.projectName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MyProjectDetails
 */
export const MyProjectDetails = new MyProjectDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MyProjectConfiguration$Type extends MessageType<MyProjectConfiguration> {
    constructor() {
        super("MyProjectConfiguration", [
            { no: 1, name: "userName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "startupRed", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "startupGreen", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "startupBlue", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MyProjectConfiguration>): MyProjectConfiguration {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userName = "";
        message.startupRed = 0;
        message.startupGreen = 0;
        message.startupBlue = 0;
        if (value !== undefined)
            reflectionMergePartial<MyProjectConfiguration>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MyProjectConfiguration): MyProjectConfiguration {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string userName */ 1:
                    message.userName = reader.string();
                    break;
                case /* uint32 startupRed */ 2:
                    message.startupRed = reader.uint32();
                    break;
                case /* uint32 startupGreen */ 3:
                    message.startupGreen = reader.uint32();
                    break;
                case /* uint32 startupBlue */ 4:
                    message.startupBlue = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MyProjectConfiguration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string userName = 1; */
        if (message.userName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userName);
        /* uint32 startupRed = 2; */
        if (message.startupRed !== 0)
            writer.tag(2, WireType.Varint).uint32(message.startupRed);
        /* uint32 startupGreen = 3; */
        if (message.startupGreen !== 0)
            writer.tag(3, WireType.Varint).uint32(message.startupGreen);
        /* uint32 startupBlue = 4; */
        if (message.startupBlue !== 0)
            writer.tag(4, WireType.Varint).uint32(message.startupBlue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MyProjectConfiguration
 */
export const MyProjectConfiguration = new MyProjectConfiguration$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetProjectDetailsResponse$Type extends MessageType<GetProjectDetailsResponse> {
    constructor() {
        super("GetProjectDetailsResponse", [
            { no: 1, name: "projectDetails", kind: "message", T: () => MyProjectDetails },
            { no: 2, name: "currentConfiguration", kind: "message", T: () => MyProjectConfiguration }
        ]);
    }
    create(value?: PartialMessage<GetProjectDetailsResponse>): GetProjectDetailsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetProjectDetailsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetProjectDetailsResponse): GetProjectDetailsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MyProjectDetails projectDetails */ 1:
                    message.projectDetails = MyProjectDetails.internalBinaryRead(reader, reader.uint32(), options, message.projectDetails);
                    break;
                case /* MyProjectConfiguration currentConfiguration */ 2:
                    message.currentConfiguration = MyProjectConfiguration.internalBinaryRead(reader, reader.uint32(), options, message.currentConfiguration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetProjectDetailsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MyProjectDetails projectDetails = 1; */
        if (message.projectDetails)
            MyProjectDetails.internalBinaryWrite(message.projectDetails, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* MyProjectConfiguration currentConfiguration = 2; */
        if (message.currentConfiguration)
            MyProjectConfiguration.internalBinaryWrite(message.currentConfiguration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetProjectDetailsResponse
 */
export const GetProjectDetailsResponse = new GetProjectDetailsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetBoardLightColorRequest$Type extends MessageType<SetBoardLightColorRequest> {
    constructor() {
        super("SetBoardLightColorRequest", [
            { no: 1, name: "red", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "green", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "blue", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetBoardLightColorRequest>): SetBoardLightColorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.red = 0;
        message.green = 0;
        message.blue = 0;
        if (value !== undefined)
            reflectionMergePartial<SetBoardLightColorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetBoardLightColorRequest): SetBoardLightColorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 red */ 1:
                    message.red = reader.uint32();
                    break;
                case /* uint32 green */ 2:
                    message.green = reader.uint32();
                    break;
                case /* uint32 blue */ 3:
                    message.blue = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetBoardLightColorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 red = 1; */
        if (message.red !== 0)
            writer.tag(1, WireType.Varint).uint32(message.red);
        /* uint32 green = 2; */
        if (message.green !== 0)
            writer.tag(2, WireType.Varint).uint32(message.green);
        /* uint32 blue = 3; */
        if (message.blue !== 0)
            writer.tag(3, WireType.Varint).uint32(message.blue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetBoardLightColorRequest
 */
export const SetBoardLightColorRequest = new SetBoardLightColorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetBoardLightColorResponse$Type extends MessageType<SetBoardLightColorResponse> {
    constructor() {
        super("SetBoardLightColorResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetBoardLightColorResponse>): SetBoardLightColorResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<SetBoardLightColorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetBoardLightColorResponse): SetBoardLightColorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetBoardLightColorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetBoardLightColorResponse
 */
export const SetBoardLightColorResponse = new SetBoardLightColorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InvalidCommandResponse$Type extends MessageType<InvalidCommandResponse> {
    constructor() {
        super("InvalidCommandResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InvalidCommandResponse>): InvalidCommandResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<InvalidCommandResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InvalidCommandResponse): InvalidCommandResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InvalidCommandResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message InvalidCommandResponse
 */
export const InvalidCommandResponse = new InvalidCommandResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MyProjectCommand$Type extends MessageType<MyProjectCommand> {
    constructor() {
        super("MyProjectCommand", [
            { no: 1, name: "noArgCommand", kind: "enum", oneof: "command", T: () => ["NoArgCommands", NoArgCommands] },
            { no: 2, name: "helloQromaRequest", kind: "message", oneof: "command", T: () => HelloQromaRequest },
            { no: 3, name: "mathRequest", kind: "message", oneof: "command", T: () => MathRequest },
            { no: 4, name: "setBoardLightColorRequest", kind: "message", oneof: "command", T: () => SetBoardLightColorRequest },
            { no: 5, name: "setMyProjectConfigurationRequest", kind: "message", oneof: "command", T: () => MyProjectConfiguration }
        ]);
    }
    create(value?: PartialMessage<MyProjectCommand>): MyProjectCommand {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.command = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MyProjectCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MyProjectCommand): MyProjectCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* NoArgCommands noArgCommand */ 1:
                    message.command = {
                        oneofKind: "noArgCommand",
                        noArgCommand: reader.int32()
                    };
                    break;
                case /* HelloQromaRequest helloQromaRequest */ 2:
                    message.command = {
                        oneofKind: "helloQromaRequest",
                        helloQromaRequest: HelloQromaRequest.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).helloQromaRequest)
                    };
                    break;
                case /* MathRequest mathRequest */ 3:
                    message.command = {
                        oneofKind: "mathRequest",
                        mathRequest: MathRequest.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).mathRequest)
                    };
                    break;
                case /* SetBoardLightColorRequest setBoardLightColorRequest */ 4:
                    message.command = {
                        oneofKind: "setBoardLightColorRequest",
                        setBoardLightColorRequest: SetBoardLightColorRequest.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setBoardLightColorRequest)
                    };
                    break;
                case /* MyProjectConfiguration setMyProjectConfigurationRequest */ 5:
                    message.command = {
                        oneofKind: "setMyProjectConfigurationRequest",
                        setMyProjectConfigurationRequest: MyProjectConfiguration.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).setMyProjectConfigurationRequest)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MyProjectCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* NoArgCommands noArgCommand = 1; */
        if (message.command.oneofKind === "noArgCommand")
            writer.tag(1, WireType.Varint).int32(message.command.noArgCommand);
        /* HelloQromaRequest helloQromaRequest = 2; */
        if (message.command.oneofKind === "helloQromaRequest")
            HelloQromaRequest.internalBinaryWrite(message.command.helloQromaRequest, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* MathRequest mathRequest = 3; */
        if (message.command.oneofKind === "mathRequest")
            MathRequest.internalBinaryWrite(message.command.mathRequest, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* SetBoardLightColorRequest setBoardLightColorRequest = 4; */
        if (message.command.oneofKind === "setBoardLightColorRequest")
            SetBoardLightColorRequest.internalBinaryWrite(message.command.setBoardLightColorRequest, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* MyProjectConfiguration setMyProjectConfigurationRequest = 5; */
        if (message.command.oneofKind === "setMyProjectConfigurationRequest")
            MyProjectConfiguration.internalBinaryWrite(message.command.setMyProjectConfigurationRequest, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MyProjectCommand
 */
export const MyProjectCommand = new MyProjectCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MyProjectResponse$Type extends MessageType<MyProjectResponse> {
    constructor() {
        super("MyProjectResponse", [
            { no: 1, name: "invalidCommandResponse", kind: "message", oneof: "response", T: () => InvalidCommandResponse },
            { no: 2, name: "helloQromaResponse", kind: "message", oneof: "response", T: () => HelloQromaResponse },
            { no: 3, name: "mathResponse", kind: "message", oneof: "response", T: () => MathResponse },
            { no: 4, name: "getBoardDetailsResponse", kind: "message", oneof: "response", T: () => BoardDetails },
            { no: 5, name: "setBoardLightColorResponse", kind: "message", oneof: "response", T: () => SetBoardLightColorResponse },
            { no: 6, name: "getProjectDetailsResponse", kind: "message", oneof: "response", T: () => GetProjectDetailsResponse }
        ]);
    }
    create(value?: PartialMessage<MyProjectResponse>): MyProjectResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<MyProjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MyProjectResponse): MyProjectResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* InvalidCommandResponse invalidCommandResponse */ 1:
                    message.response = {
                        oneofKind: "invalidCommandResponse",
                        invalidCommandResponse: InvalidCommandResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).invalidCommandResponse)
                    };
                    break;
                case /* HelloQromaResponse helloQromaResponse */ 2:
                    message.response = {
                        oneofKind: "helloQromaResponse",
                        helloQromaResponse: HelloQromaResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).helloQromaResponse)
                    };
                    break;
                case /* MathResponse mathResponse */ 3:
                    message.response = {
                        oneofKind: "mathResponse",
                        mathResponse: MathResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).mathResponse)
                    };
                    break;
                case /* BoardDetails getBoardDetailsResponse */ 4:
                    message.response = {
                        oneofKind: "getBoardDetailsResponse",
                        getBoardDetailsResponse: BoardDetails.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).getBoardDetailsResponse)
                    };
                    break;
                case /* SetBoardLightColorResponse setBoardLightColorResponse */ 5:
                    message.response = {
                        oneofKind: "setBoardLightColorResponse",
                        setBoardLightColorResponse: SetBoardLightColorResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).setBoardLightColorResponse)
                    };
                    break;
                case /* GetProjectDetailsResponse getProjectDetailsResponse */ 6:
                    message.response = {
                        oneofKind: "getProjectDetailsResponse",
                        getProjectDetailsResponse: GetProjectDetailsResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).getProjectDetailsResponse)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MyProjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* InvalidCommandResponse invalidCommandResponse = 1; */
        if (message.response.oneofKind === "invalidCommandResponse")
            InvalidCommandResponse.internalBinaryWrite(message.response.invalidCommandResponse, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* HelloQromaResponse helloQromaResponse = 2; */
        if (message.response.oneofKind === "helloQromaResponse")
            HelloQromaResponse.internalBinaryWrite(message.response.helloQromaResponse, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* MathResponse mathResponse = 3; */
        if (message.response.oneofKind === "mathResponse")
            MathResponse.internalBinaryWrite(message.response.mathResponse, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* BoardDetails getBoardDetailsResponse = 4; */
        if (message.response.oneofKind === "getBoardDetailsResponse")
            BoardDetails.internalBinaryWrite(message.response.getBoardDetailsResponse, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* SetBoardLightColorResponse setBoardLightColorResponse = 5; */
        if (message.response.oneofKind === "setBoardLightColorResponse")
            SetBoardLightColorResponse.internalBinaryWrite(message.response.setBoardLightColorResponse, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* GetProjectDetailsResponse getProjectDetailsResponse = 6; */
        if (message.response.oneofKind === "getProjectDetailsResponse")
            GetProjectDetailsResponse.internalBinaryWrite(message.response.getProjectDetailsResponse, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MyProjectResponse
 */
export const MyProjectResponse = new MyProjectResponse$Type();
